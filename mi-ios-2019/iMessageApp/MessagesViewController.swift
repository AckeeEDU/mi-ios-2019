//
//  MessagesViewController.swift
//  iMessageApp
//
//  Created by Jakub Olejník on 24/04/2019.
//  Copyright © 2019 ČVUT. All rights reserved.
//

import UIKit
import SnapKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    private lazy var userRepository = UserRepository()
    
    private weak var button: UIButton!
    
    override func loadView() {
        super.loadView()
        
        let button = UIButton(type: .system)
        button.setTitle("Button", for: .normal)
        view.addSubview(button)
        button.snp.makeConstraints { (make) in
            make.centerX.equalToSuperview()
            make.top.equalTo(50)
        }
        self.button = button
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        button.setTitle(userRepository.currentUser.value?.name ?? "No user", for: .normal)
        
        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)
    }
    
    // MARK: - UI action
    
    @objc
    private func buttonTapped() {
        activeConversation?.insertText(button.title(for: .normal) ?? "", completionHandler: nil)
    }
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
